# Process this file with autoconf to create configure.

AC_PREREQ([2.65])

# ====================
# Version informations
# ====================
m4_define([libmspub_version_major],[0])
m4_define([libmspub_version_minor],[1])
m4_define([libmspub_version_micro],[2])
m4_define([libmspub_version],[libmspub_version_major.libmspub_version_minor.libmspub_version_micro])

# =============
# Automake init
# =============
AC_INIT([libmspub],[libmspub_version])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_HEADER([config.h])
AM_INIT_AUTOMAKE([1.11 foreign dist-xz dist-bzip2])
AM_SILENT_RULES([yes])
AC_LANG([C++])

# ===========================
# Find required base packages
# ===========================
m4_ifdef([AM_PROG_AR], [AM_PROG_AR])
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
LT_INIT([win32-dll disable-static pic-only])
AC_CANONICAL_HOST

PKG_PROG_PKG_CONFIG([0.20])

# ===============
# Find librevenge
# ===============
PKG_CHECK_MODULES([REVENGE],[
	librevenge-0.0 >= 0.0.1
])
AC_SUBST([REVENGE_CFLAGS])
AC_SUBST([REVENGE_LIBS])

# =====
# Tools
# =====
AC_ARG_ENABLE([tools],
	[AS_HELP_STRING([--disable-tools], [Build conversion tools])],
	[enable_tools="$enableval"],
	[enable_tools=yes]
)
AS_IF([test "x$enable_tools" = "xyes"], [
	PKG_CHECK_MODULES([REVENGE_STREAM],[
		librevenge-stream-0.0
	])
	PKG_CHECK_MODULES([REVENGE_GENERATORS],[
		librevenge-generators-0.0
	])
])
AC_SUBST([REVENGE_STREAM_CFLAGS])
AC_SUBST([REVENGE_STREAM_LIBS])
AC_SUBST([REVENGE_GENERATORS_CFLAGS])
AC_SUBST([REVENGE_GENERATORS_LIBS])
AM_CONDITIONAL(BUILD_TOOLS, [test "x$enable_tools" = "xyes"])

# =========
# Find zlib
# =========
PKG_CHECK_MODULES([ZLIB],[zlib],[],[
    AC_CHECK_HEADER(zlib.h, [ZLIB_CFLAGS=],
        [AC_MSG_ERROR(zlib.h not found. install zlib)], [])
    AC_CHECK_LIB(z, inflate, [ ZLIB_LIBS=-lz ],
        [AC_MSG_ERROR(zlib not found or functional)], [])
])
AC_SUBST(ZLIB_CFLAGS)
AC_SUBST(ZLIB_LIBS)

# ===========================
# Find required boost headers
# ===========================
AC_CHECK_HEADERS(
	boost/bind.hpp \
	boost/function.hpp \
	boost/optional.hpp \
	boost/ptr_container/ptr_vector.hpp \
	boost/scoped_ptr.hpp \
	boost/shared_ptr.hpp,
	[],
	[AC_MSG_ERROR(Required boost headers not found. Install boost)],
	[]
)

# ========
# Find icu
# ========
AS_IF([test "${ICU_CFLAGS+set}" = set],[
	ICU_CFLAGS_overriden=yes],[
	ICU_CFLAGS_overriden=no])
PKG_CHECK_MODULES([ICU],[icu-i18n],[
	AS_IF([test "${ICU_CFLAGS_overriden}" = no], [
		ICU_CFLAGS="${ICU_CFLAGS} `${PKG_CONFIG} icu-i18n --variable=CXXFLAGS`"])
	], [
	AC_PATH_PROG([ICU_CONFIG],[icu-config])
	AC_MSG_CHECKING([ICU installation])
	AS_IF([${ICU_CONFIG} --cflags >/dev/null 2>&1],[
		ICU_CFLAGS=`${ICU_CONFIG} --cppflags-searchpath --cxxflags`
		ICU_LIBS=`${ICU_CONFIG} --ldflags`
		AC_MSG_RESULT([found])],[
		AC_MSG_ERROR([libicu config program icu-config not found])])]
)
AC_SUBST(ICU_CFLAGS)
AC_SUBST(ICU_LIBS)


# =================================
# Libtool/Version Makefile settings
# =================================
AC_SUBST(MSPUB_MAJOR_VERSION, [libmspub_version_major])
AC_SUBST(MSPUB_MINOR_VERSION, [libmspub_version_minor])
AC_SUBST(MSPUB_MICRO_VERSION, [libmspub_version_micro])
AC_SUBST(MSPUB_VERSION, [libmspub_version])
# AC_SUBST(LT_RELEASE, [libmspub_version_major.libmspub_version_minor])
LT_CURRENT=`expr 100 '*' libmspub_version_major + libmspub_version_minor`
# For 1.0.0 comment the first line and uncomment the second
LT_AGE=0
# LT_AGE=libmspub_version_minor
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION, [libmspub_version_micro])
AC_SUBST(LT_AGE)

# ==========================
# Platform check for windows
# ==========================
AC_MSG_CHECKING([for native Win32])
AS_CASE([$host],
	[*-*-mingw*], [
		native_win32=yes
		LIBMSPUB_WIN32_RESOURCE=libmspub-win32res.lo
		PUB2RAW_WIN32_RESOURCE=pub2raw-win32res.lo
		PUB2XHTML_WIN32_RESOURCE=pub2xhtml-win32res.lo
	], [
		native_win32=no
		LIBMSPUB_WIN32_RESOURCE=
		PUB2RAW_WIN32_RESOURCE=
		PUB2XHTML_WIN32_RESOURCE=
	]
)
AC_MSG_RESULT([$native_win32])
AM_CONDITIONAL(OS_WIN32, [test "x$native_win32" = "xyes"])
AC_SUBST(LIBMSPUB_WIN32_RESOURCE)
AC_SUBST(PUB2RAW_WIN32_RESOURCE)
AC_SUBST(PUB2XHTML_WIN32_RESOURCE)

AC_MSG_CHECKING([for Win32 platform in general])
AS_CASE([$host],
	[*-*-mingw*|*-*-cygwin*], [platform_win32=yes],
	[platform_win32=no]
)
AC_MSG_RESULT([$platform_win32])
AM_CONDITIONAL([PLATFORM_WIN32], [test "x$platform_win32" = "xyes"])

AS_IF([test $platform_win32 == yes],
    [],
    [
        AC_MSG_CHECKING([for -fvisibility=hidden compiler flag])
        saved_CXXFLAGS="$CXXFLAGS"
        CXXFLAGS="$CXXFLAGS -fvisibility=hidden"
        AC_TRY_COMPILE([], [],
            [
                AC_MSG_RESULT([yes])
                CXXFLAGS="$CXXFLAGS -DLIBMSPUB_VISIBILITY"
            ],
            [
                AC_MSG_RESULT([no])
                CXXFLAGS="$saved_CXXFLAGS"
            ]
        )
    ]
)

# ================
# Check for cflags
# ================
AC_ARG_ENABLE([werror],
	[AS_HELP_STRING([--enable-werror], [Treat all warnings as errors, usefull for development])],
	[enable_werror="$enableval"],
	[enable_werror=no]
)
AS_IF([test x"$enable_werror" != "xno"], [
	CFLAGS="$CFLAGS -Werror"
	CXXFLAGS="$CXXFLAGS -Werror"
])
AC_ARG_ENABLE([weffc],
	[AS_HELP_STRING([--disable-weffc], [ Disable -Weffc++ warnings, usefull when using an old version of gcc or of boost])],
	[enable_weffc="$enableval"],
	[enable_weffc=yes]
)
AC_ARG_ENABLE([wparanoic],
	[AS_HELP_STRING([--enable-wparanoic], [Enable a lot of warnings...])],
	[enable_wparanoic="$enableval"],
	[enable_wparanoic=no]
)
# Courtesy of Glib: Ensure MSVC-compatible struct packing convention
# is used when compiling for Win32 with gcc.
AS_IF([test "x$native_win32" = "xyes"], [
	AC_CHECK_TOOL(WINDRES, windres)
	AS_IF([test x"$GCC" = xyes], [
		AC_MSG_CHECKING([how to get MSVC-compatible struct packing])
		AS_IF([test -z "$ac_cv_prog_CC"], [
			our_gcc="$CC"
		], [
			our_gcc="$ac_cv_prog_CC"
		])
		AS_IF([$our_gcc -v --help 2>/dev/null | grep ms-bitfields >/dev/null], [
			msnative_struct="-mms-bitfields"
			CFLAGS="$CFLAGS $msnative_struct"
			CXXFLAGS="$CXXFLAGS $msnative_struct"
			AC_MSG_RESULT([${msnative_struct}])
		], [
			AC_MSG_RESULT([no way])
			AC_MSG_WARN([produced libraries might be incompatible with MSVC-compiled code])
		])
	])
	CFLAGS="$CFLAGS -Wall -Wextra -pedantic"
	CXXFLAGS="$CXXFLAGS -Wall -Wextra -pedantic"
], [
	AS_IF([test x"$GCC" = xyes], [
		# Be tough with warnings and produce less careless code
		CFLAGS="$CFLAGS -Wall -Wextra -pedantic"
		CXXFLAGS="$CXXFLAGS -Wall -Wextra -pedantic -Wshadow -Wunused-variable"
		AS_IF([test x"$enable_weffc" != "xno"], [
			CXXFLAGS="$CXXFLAGS -Weffc++"
		])
		AS_IF([test x"$enable_wparanoic" != "xno"], [
			CXXFLAGS="$CXXFLAGS -Wcast-align -Wcast-qual -Wchar-subscripts"
			CXXFLAGS="$CXXFLAGS -Wcomment -Wconversion -Wdisabled-optimization"
			CXXFLAGS="$CXXFLAGS -Wfloat-equal -Wformat -Wformat=2"
			CXXFLAGS="$CXXFLAGS -Wformat-nonliteral -Wformat-security"
			CXXFLAGS="$CXXFLAGS -Wformat-y2k -Wimport -Winit-self -Winvalid-pch"
			CXXFLAGS="$CXXFLAGS -Wmissing-braces -Wmissing-field-initializers"
			CXXFLAGS="$CXXFLAGS -Wmissing-format-attribute -Wmissing-include-dirs"
			CXXFLAGS="$CXXFLAGS -Wmissing-noreturn -Wpacked -Wparentheses"
			CXXFLAGS="$CXXFLAGS -Wpointer-arith -Wredundant-decls -Wreturn-type"
			CXXFLAGS="$CXXFLAGS -Wsequence-point -Wsign-compare -Wstrict-aliasing"
			CXXFLAGS="$CXXFLAGS -Wstrict-aliasing=2 -Wswitch -Wswitch-default"
			CXXFLAGS="$CXXFLAGS -Wswitch-enum -Wtrigraphs -Wunknown-pragmas -Wunused"
			CXXFLAGS="$CXXFLAGS -Wunused-function -Wunused-label -Wunused-parameter"
			CXXFLAGS="$CXXFLAGS -Wunused-value -Wvariadic-macros"
			CXXFLAGS="$CXXFLAGS -Wvolatile-register-var -Wwrite-strings"
		])
	])
])
AC_SUBST(DEBUG_CXXFLAGS)

# ============
# Debug switch
# ============
AC_ARG_ENABLE([debug],
	[AS_HELP_STRING([--enable-debug], [Turn on debugging])],
	[enable_debug="$enableval"],
	[enable_debug=no]
)
AS_IF([test "x$enable_debug" = "xyes"], [
	DEBUG_CXXFLAGS="-DDEBUG -g"
	CXXFLAGS="$CXXFLAGS -O0"
	CFLAGS="$CFLAGS -O0"
], [
	DEBUG_CXXFLAGS="-DNDEBUG"
])
LIBMSPUB_CXXFLAGS="$LIBMSPUB_CFLAGS"
AC_SUBST(LIBMSPUB_CXXFLAGS)
AC_SUBST(DEBUG_CXXFLAGS)

# =============
# Documentation
# =============
AC_ARG_WITH(docs,
	[AS_HELP_STRING([--without-docs], [Do not build documentation])],
	[with_docs="$withval"],
	[AS_IF([test "x$native_win32" = "xyes"], [with_docs=no], [with_docs=yes])]
)
AS_IF([test "x$with_docs" != "xno"], [
	AC_PATH_PROG(DOXYGEN, [doxygen])
	AS_IF([test -z "$DOXYGEN"], [
		AC_MSG_WARN([*** Could not find doxygen in your PATH.])
		AC_MSG_WARN([*** The documentation will not be built.])
		build_docs=no
	], [build_docs=yes])
], [build_docs=no])
AM_CONDITIONAL([WITH_LIBMSPUB_DOCS], [test "x$build_docs" != "xno"])

# =====================
# Prepare all .in files
# =====================
AC_CONFIG_FILES([
Makefile
src/Makefile
src/conv/Makefile
src/conv/raw/Makefile
src/conv/raw/pub2raw.rc
src/conv/svg/Makefile
src/conv/svg/pub2xhtml.rc
src/lib/Makefile
src/lib/libmspub.rc
inc/Makefile
inc/libmspub/Makefile
build/Makefile
build/win32/Makefile
docs/Makefile
docs/doxygen/Makefile
libmspub-$MSPUB_MAJOR_VERSION.$MSPUB_MINOR_VERSION.pc:libmspub.pc.in
])
AC_OUTPUT

# ==============================================
# Display final informations about configuration
# ==============================================
AC_MSG_NOTICE([
==============================================================================
Build configuration:
	debug:           ${enable_debug}
	docs:            ${build_docs}
	static-tools:    ${enable_static_tools}
	werror:          ${enable_werror}
==============================================================================
])
